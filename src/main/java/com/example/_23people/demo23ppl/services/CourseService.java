package com.example._23people.demo23ppl.services;

import java.net.URI;
import java.sql.Connection;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityManager;
import javax.persistence.ParameterMode;
import javax.persistence.StoredProcedureQuery;

import com.example._23people.demo23ppl.models.Course;
import com.example._23people.demo23ppl.repositories.CourseRepository;

import org.hibernate.Session;
import org.hibernate.procedure.ProcedureCall;
import org.hibernate.result.Output;
import org.hibernate.result.ResultSetOutput;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

@Service
public class CourseService{
    CourseRepository courseRepository;
    EntityManager em;

    @Autowired
    public CourseService(CourseRepository courseRepository, EntityManager entityManager){
        this.courseRepository=courseRepository;
        this.em=entityManager;
    }

    public Iterable<Course> getAll()
    {
        return courseRepository.findAll();
    }
    public Page<Course> getAllPaginate(Pageable pageable)
    {
        return courseRepository.findAll(pageable);
    }
    public Course getByID(Long entryID) {

        Optional<Course> courseOptional = courseRepository.findById(entryID);

        if(!courseOptional.isPresent()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "A Course with ID nº "+ entryID.toString()
                +" could not be found. Please provide a valid ID and try again");
        }
        return courseOptional.get();
    }

    public ResponseEntity<Object> create(Course course){
        Course courseSaved = courseRepository.save(course);

        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
            .buildAndExpand(courseSaved.getId()).toUri();
            
        return ResponseEntity.created(location).build();
    }

    // autogenerated ID, if course id not found, then url parameter ID is discarded
    public ResponseEntity<Object> put(Course newCourse, Long id){
        Course updatedCourse = courseRepository.findById(id).
        map(course -> {
            course.setName(newCourse.getName());
            return courseRepository.save(course);
        }).orElseGet(() -> {
            newCourse.setId(id);
            return courseRepository.save(newCourse);
        });
        
        return ResponseEntity.created(
            ServletUriComponentsBuilder.fromCurrentRequest()
            .buildAndExpand(updatedCourse.getId()).toUri()
        ).build();
    }
    public void deleteCourse(Long id){
        Optional<Course> courseOptional = courseRepository.findById(id);

        if(!courseOptional.isPresent()){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "A course with ID nº "+ id.toString()
                +" could not be found. Please provide a valid ID and try again");
        }
        courseRepository.delete(courseOptional.get());
    }
    
    // required to allow jpa to retrieve the pgcursor before committing transaction
    @Transactional 
    public List<Course> callStoredProc()
    {
    	//Session session = em.unwrap(Session.class);
    	//session.doWork(connection -> { connection.setAutoCommit(false); });    	
    	
    	List <Course> courses = (List<Course>) this.em.createNamedStoredProcedureQuery("getcourses").getResultList();
    	return courses;
    }
    
    // hibernate way to call, using ProcedureCall (pgplsql function returns RECORD - TABLE)
    public List<Object[]> getRecordsFromFunction()
    {
    	Session session = em.unwrap(Session.class);
    	List<Object[]> resultado = null;

    	ProcedureCall call = session.createStoredProcedureCall("fnselcourse");
    	//call.registerParameter(1,void.class,ParameterMode.REF_CURSOR); 
    	Output output = call.getOutputs().getCurrent();

    	if (output.isResultSet()) { 
    		resultado = ((ResultSetOutput)output).getResultList(); 
    	}
    	return resultado;
    }
}