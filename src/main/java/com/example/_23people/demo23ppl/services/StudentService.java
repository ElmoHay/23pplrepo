package com.example._23people.demo23ppl.services;

import java.net.URI;
import java.util.Optional;


import com.example._23people.demo23ppl.exceptions.StudentNotFoundException;
import com.example._23people.demo23ppl.models.Student;
import com.example._23people.demo23ppl.repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

@Service
public class StudentService
{   
    StudentRepository studentRepository;

    @Autowired
    StudentService(StudentRepository studentRepository){
        this.studentRepository = studentRepository;
    }

    public Iterable<Student> getAllCoursesOfStudent(Long courseId){
        return studentRepository.findByCourseId(courseId);
    }

    public Page<Student> getAllPaginate(Pageable pageable)
    {
        return studentRepository.findAll(pageable);
    }
    
    public Student getByID(Long entryID) throws StudentNotFoundException {

        Optional<Student> studentOptional = studentRepository.findById(entryID);

        if(!studentOptional.isPresent()) {
            throw new StudentNotFoundException("I'm sorry, no student could be found "
                +"for the given the id: " + entryID.toString());
        }
        return studentOptional.get();
    }
    //TO-DO: refactor
    public ResponseEntity<Object> create(Student student){
        Student studentSaved = studentRepository.save(student);

        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
            .buildAndExpand(studentSaved.getId()).toUri();
            
        return ResponseEntity.created(location).build();
    }
    // autogenerated ID, if student id not found, then url parameter ID is discarded
    public ResponseEntity<Object> put(Student newStudent, Long id){
        Student updatedStudent = studentRepository.findById(id).
        map(student -> {
            student.setRut(newStudent.getRut());
            student.setFirstname(newStudent.getFirstname());
            student.setLastname(newStudent.getLastname());
            student.setEmail(newStudent.getEmail());
            return studentRepository.save(student);
        }).orElseGet(() -> {
            newStudent.setId(id);
            return studentRepository.save(newStudent);
        });
        
        return ResponseEntity.created(
            ServletUriComponentsBuilder.fromCurrentRequest()
            .buildAndExpand(updatedStudent.getId()).toUri()
        ).build();
    }
    
    //commented lines: exception handling example to be used in course controller
    public void delete(Long id)
    {
        Optional<Student> studentOptional = studentRepository.findById(id);

        if(!studentOptional.isPresent()) {
        	throw new StudentNotFoundException("No student with ID "+ id.toString() 
                +" could be found to be deleted");
            // throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "A student with ID nÂº "+ id.toString()
                // +" could not be found. Please provide a valid ID and try again");
        }
        
        studentRepository.delete(studentRepository.findById(id).get());
    }
}